name: Merge JUnit reports
author: donnerbart@users.noreply.github.com
description: Downloads the JUnit reports a Git branch
branding:
  icon: download
  color: blue
inputs:
  split-index:
    description: Index of this instance executing the tests (integer)
    required: true
    type: number
  git-branch:
    description: The Git branch in this repository to download the JUnit reports from (string)
    required: true
    type: string
  path:
    description: Relative path under the GitHub workspace to download the JUnit reports (string)
    required: false
    type: string
    default: ${{ github.workspace }}
  upload-artifact:
    description: Configures if the artifact should be uploaded. Useful if you have an additional matrix dimension, so limiting to split-index 0 is not enough to prevent concurrency issues (boolean)
    required: false
    type: boolean
    default: true
  artifact-name:
    description: The artifact name for the SHA of the JUnit reports (string)
    required: false
    type: string
    default: junit-xml-reports-sha
  artifact-path:
    description: Path to save the SHA of the JUnit reports in the GitHub workspace (string)
    required: false
    type: string
    default: junit-xml-reports-sha
runs:
  using: composite
  steps:
    - name: Check if JUnit reports SHA artifact exists
      id: junit-reports-sha-check
      uses: lit-Protocol/artifact-exists-action@ff41b0e92208918c585721cbf3e866dfddaf7879 # v0
      with:
        name: ${{ inputs.artifact-name }}

    - name: Download JUnit reports SHA artifact
      if: ${{ steps.junit-reports-sha-check.outputs.exists == 'true' }}
      uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}

    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      with:
        path: ${{ inputs.path }}

    - name: Check JUnit reports SHA
      id: junit-reports-sha
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        echo "Checking JUnit reports SHA"
        UPLOAD_SHA_ARTIFACT=${{ inputs.upload-artifact }}
        CHECKOUT_REF=${{ inputs.git-branch }}
        if [ -f "../${{ inputs.artifact-path }}/junit-reports-sha.txt" ]; then
          SAVED_SHA=$(cat "../${{ inputs.artifact-path }}/junit-reports-sha.txt")
          echo "Checking out saved SHA '$SAVED_SHA' for repeatable test distribution"
          git fetch --quiet
          if git rev-parse --verify "$SAVED_SHA^{commit}" >/dev/null 2>&1; then
            git checkout --quiet "$SAVED_SHA"
            UPLOAD_SHA_ARTIFACT=false
          else
            echo "Error: Saved SHA '$SAVED_SHA' is not a valid commit. Aborting checkout." >&2
            exit 1
          fi
        else
          # no SHA artifact exists, handle branch checkout and potentially create new SHA artifact
          if git ls-remote --exit-code --heads origin "$CHECKOUT_REF"; then
            echo "Switching to existing branch: $CHECKOUT_REF"
            git fetch --quiet
            git switch "$CHECKOUT_REF"
          else
            echo "Branch $CHECKOUT_REF does not exist, no JUnit test reports available"
            cd ..
            rm -rf "${{ inputs.path }}"
            mkdir -p "${{ inputs.path }}"
            UPLOAD_SHA_ARTIFACT=false
          fi
        fi
        # we can only upload the artifact once, so only do this on the first split
        if [ "${{ inputs.split-index }}" != "0" ]; then
          echo "Skipping upload of JUnit reports SHA on this index"
          UPLOAD_SHA_ARTIFACT=false
        elif [ "$UPLOAD_SHA_ARTIFACT" == "true" ]; then
          echo "Will upload JUnit reports SHA for branch $CHECKOUT_REF"
        else
          echo "Will not upload JUnit reports SHA"
        fi
        echo "upload-artifact=${UPLOAD_SHA_ARTIFACT}" >> "$GITHUB_OUTPUT"

    - name: Save JUnit reports SHA
      if: ${{ steps.junit-reports-sha.outputs.upload-artifact == 'true' }}
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        SHA=$(git rev-parse HEAD)
        echo "Saving JUnit reports SHA $SHA"
        mkdir -p "../${{ inputs.artifact-path }}"
        cd "../${{ inputs.artifact-path }}"
        echo -n "$SHA" > junit-reports-sha.txt

    - name: Upload JUnit report SHA
      if: ${{ steps.junit-reports-sha.outputs.upload-artifact == 'true' }}
      uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}
        overwrite: true

    - name: Clean up JUnit reports SHA
      if: always()
      shell: bash
      run: |
        rm -rf ${{ inputs.artifact-path }} || true
