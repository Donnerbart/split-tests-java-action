name: Split Tests Java
author: donnerbart@users.noreply.github.com
description: Splits a JUnit test suite for parallelization with equal time
branding:
  icon: shuffle
  color: blue
inputs:
  split-index:
    description: Index of this instance executing the tests (integer)
    required: true
    type: number
  split-total:
    description: Total number of instances executing the tests (integer)
    required: true
    type: number
  glob:
    description: Glob pattern to find test files (string)
    required: true
    type: string
  exclude-glob:
    description: Glob pattern to exclude test files (string)
    required: false
    type: string
    default: ""
  junit-glob:
    description: Glob pattern to find JUnit reports (string)
    required: false
    type: string
  format:
    description: The output format (choice)
    required: false
    type: choice
    options:
      - list
      - gradle
    default: list
  average-time:
    deprecationMessage: This option is deprecated and should no longer be used. Use new-test-time instead.
    description: Use the average test time from tests with JUnit reports for tests without JUnit reports (boolean)
    required: false
    type: boolean
    default: false
  new-test-time:
    description: Configures the calculation of the test time for tests without JUnit reports (choice)
    required: false
    type: choice
    options:
      - zero
      - average
      - min
      - max
    default: average
  working-directory:
    description: The working directory. Defaults to the current directory (string)
    type: string
    required: false
  calculate-optimal-total-split:
    description: Calculates the optimal test split. Logs a warning if split-total does not match (boolean)
    type: boolean
    required: false
  max-optimal-total-split-calculations:
    description: The maximum number of calculate-optimal-total-split calculations (integer)
    type: integer
    required: false
  debug:
    description: Enables debug logging (boolean)
    required: false
    type: boolean
    default: false
outputs:
  test-suite:
    description: A subset of tests, based on the the split index and split type
    value: ${{ steps.split-tests-java.outputs.test-suite }}
  split-total:
    description: Total number of instances executing the tests
    value: ${{ inputs.split-total }}
  split-index:
    description: Index of this instance executing the tests
    value: ${{ inputs.split-index }}
runs:
  using: composite
  steps:
    - name: Install split-tests-java
      shell: bash
      run: curl -L -o split-tests-java.jar "https://github.com/donnerbart/split-tests-java/releases/latest/download/split-tests-java.jar"
    - name: Split tests
      id: split-tests-java
      shell: bash
      run: |
        COMMAND="java -jar split-tests-java.jar --split-index ${{ inputs.split-index }} --split-total ${{ inputs.split-total }} --glob ${{ inputs.glob }}"
        if [ -n "${{ inputs.exclude-glob }}" ]; then
          COMMAND="$COMMAND --exclude-glob ${{ inputs.exclude-glob }}"
        fi
        if [ -n "${{ inputs.junit-glob }}" ]; then
          COMMAND="$COMMAND --junit-glob ${{ inputs.junit-glob }}"
        fi
        if [ -n "${{ inputs.format }}" ]; then
          COMMAND="$COMMAND --format ${{ inputs.format }}"
        fi
        if [ -n "${{ inputs.new-test-time }}" ]; then
          COMMAND="$COMMAND --new-test-time ${{ inputs.new-test-time }}"
        elif [ -n "${{ inputs.average-time }}" ]; then
          echo "Warning! Using deprecated option average-time. Please use new-test-time instead!"
          COMMAND="$COMMAND --new-test-time average"
        fi
        if [ -n "${{ inputs.working-directory }}" ]; then
          COMMAND="$COMMAND --working-directory ${{ inputs.working-directory }}"
        fi
        if [ -n "${{ inputs.calculate-optimal-total-split }}" ]; then
          COMMAND="$COMMAND --calculate-optimal-total-split"
        fi
        if [ -n "${{ inputs.max-optimal-total-split-calculations }}" ]; then
          COMMAND="$COMMAND --max-optimal-total-split-calculations ${{ inputs.max-optimal-total-split-calculations }}"
        fi
        if [ -n "${{ inputs.debug }}" ]; then
          COMMAND="$COMMAND --debug"
        fi
        echo "Command: $COMMAND"
        TESTS=$($COMMAND)
        echo "This runner will execute the following tests: $TESTS"
        echo "test-suite=${TESTS}" >> $GITHUB_OUTPUT
